name: Build Cemu Windows x64 (Zen4 Optimized)

on:
  workflow_call:
    inputs:
      next_version_major:
        required: false
        type: string
      next_version_minor:
        required: false
        type: string
      optimize_for_zen4:
        required: false
        type: boolean
        default: true  # 默认开启Zen4优化

env:
  VCPKG_ROOT: "${{github.workspace}}/dependencies/vcpkg"
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

jobs:
  build-windows:
    runs-on: windows-2022
    steps:
    - name: "Checkout repo"
      uses: actions/checkout@v4
      with:
        submodules: "recursive"

    - name: Setup release mode parameters
      run: |
        echo "BUILD_MODE=release" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "BUILD_FLAGS=" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        echo "Build mode is release"

    - name: Setup build flags for version
      if: ${{ inputs.next_version_major != '' }}
      run: |
        echo "[INFO] Version ${{ inputs.next_version_major }}.${{ inputs.next_version_minor }}"
        echo "BUILD_FLAGS=${{ env.BUILD_FLAGS }} -DEMULATOR_VERSION_MAJOR=${{ inputs.next_version_major }} -DEMULATOR_VERSION_MINOR=${{ inputs.next_version_minor }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Setup Zen4 optimization flags
      if: ${{ inputs.optimize_for_zen4 == true }}
      run: |
        echo "[INFO] Enabling AMD Zen4 specific optimizations"
        echo "BUILD_FLAGS=${{ env.BUILD_FLAGS }} -DCMAKE_C_FLAGS='${{ env.CMAKE_C_FLAGS }} /O2 /GL /Gy /arch:AVX2 /Qpar' -DCMAKE_CXX_FLAGS='${{ env.CMAKE_CXX_FLAGS }} /O2 /GL /Gy /arch:AVX2 /Qpar' -DCMAKE_EXE_LINKER_FLAGS='${{ env.CMAKE_EXE_LINKER_FLAGS }} /LTCG'" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: "Setup cmake"
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.29.0'

    - name: "Bootstrap vcpkg"
      run: |
        ./dependencies/vcpkg/bootstrap-vcpkg.bat
        
    - name: 'Setup NuGet Credentials for vcpkg'
      shell: 'bash'
      run: |
        `./dependencies/vcpkg/vcpkg.exe fetch nuget | tail -n 1` \
        sources add \
        -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
        -storepasswordincleartext \
        -name "GitHub" \
        -username "${{ github.repository_owner }}" \
        -password "${{ secrets.GITHUB_TOKEN }}"
        `./dependencies/vcpkg/vcpkg.exe fetch nuget | tail -n 1` \
        setapikey "${{ secrets.GITHUB_TOKEN }}" \
        -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        
    - name: "cmake"
      run: |
        mkdir -p build
        cd build
        # 清除CMake缓存以确保优化选项生效（修正版）
        echo "[INFO] Cleaning CMake cache"
        Remove-Item -Recurse -Force -ErrorAction SilentlyContinue .\CMakeCache.txt
        Remove-Item -Recurse -Force -ErrorAction SilentlyContinue .\CMakeFiles
        echo "[INFO] BUILD_FLAGS: ${{ env.BUILD_FLAGS }}"
        echo "[INFO] BUILD_MODE: ${{ env.BUILD_MODE }}"
        cmake .. ${{ env.BUILD_FLAGS }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_MODE }} -DVCPKG_INSTALL_OPTIONS="--clean-after-build"
        
    - name: "Build Cemu"
      run: |
        cd build
        cmake --build . --config ${{ env.BUILD_MODE }}

    - name: Prepare artifact
      run: Rename-Item bin/Cemu_release.exe Cemu.exe
      
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: cemu-bin-windows-x64${{ inputs.optimize_for_zen4 && '-zen4' || '' }}
        path: ./bin/Cemu.exe
        
    - name: Verify Zen4 optimizations
      if: ${{ inputs.optimize_for_zen4 == true }}
      run: |
        echo "Verifying Zen4 optimizations..."
        # 使用PowerShell命令检查编译日志
        $logPath = "build/CMakeFiles/CMakeOutput.log"
        if (Test-Path $logPath) {
          if (Get-Content $logPath | Select-String -Pattern "/arch:AVX2") {
            echo "AVX2 optimization detected"
          } else {
            echo "ERROR: AVX2 optimization not detected"
            exit 1
          }
          
          if (Get-Content $logPath | Select-String -Pattern "/Qpar") {
            echo "Parallel code generation detected"
          } else {
            echo "ERROR: Parallel code generation not detected"
            exit 1
          }
        } else {
          echo "Warning: CMake output log not found. Optimization verification skipped."
          echo "This may happen if CMake generated a different log file structure."
        }  